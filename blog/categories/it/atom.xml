<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: it | ipaler]]></title>
  <link href="http://ipaler.com/blog/categories/it/atom.xml" rel="self"/>
  <link href="http://ipaler.com/"/>
  <updated>2014-10-30T18:39:13+08:00</updated>
  <id>http://ipaler.com/</id>
  <author>
    <name><![CDATA[HENRY_HUANGS]]></name>
    <email><![CDATA[huangyijie1989@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LESS学习]]></title>
    <link href="http://ipaler.com/blog/2013/08/10/learn-less/"/>
    <updated>2013-08-10T14:59:00+08:00</updated>
    <id>http://ipaler.com/blog/2013/08/10/learn-less</id>
    <content type="html"><![CDATA[<p>今天下午没事学了一下less，发现用来写样式表真是方便。</p>

<h3>1. 什么是LESS</h3>

<p>LESS是一种动态样式语言，属于CSS预处理语言的一种，它使用类似CSS的语法，为CSS的赋予了动态语言的特性，如变量、继承、运算、函数等，更方便CSS的编写和维护。</p>

<p>LESS可以在多种语言、环境中使用，包括浏览器端、桌面客户端、服务端。</p>

<p>LESS的很多特性，其实对于一个有编程思想的人来看其实很简单，在这就不列举了。</p>

<p>详细的LESS学习传送门：<a href="http://www.lesscss.net/article/document.html">http://www.lesscss.net/article/document.html</a></p>

<h3>2. JavaScript求值</h3>

<p>最让我觉得兴奋的是，LESS可以支持JavaScript求值，想想以后写一个页面，需要由浏览器的大小来决定某个元素的大小，那是相当方便呀：</p>

<p><code>``css
@divColor: black;
@windowWidth:</code>document.body.clientWidth<code>;
@windowHeight:</code>document.body.clientHeight`;</p>

<p>.block {</p>

<pre><code>width: @windowWidth;
height: @windowHeight;
border: 1px @divColor solid;
</code></pre>

<p>}
```</p>

<h3>3. 注意事项</h3>

<p>需要注意的是，less.js的引入需要放到文档的最后，否则会报错:SyntaxError: JavaScript evaluation error: 'TypeError: document.body is null'</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JAVA中判断日期是上午还是下午]]></title>
    <link href="http://ipaler.com/blog/2013/08/01/java-date-am-or-pm/"/>
    <updated>2013-08-01T17:11:00+08:00</updated>
    <id>http://ipaler.com/blog/2013/08/01/java-date-am-or-pm</id>
    <content type="html"><![CDATA[<p><code>java
GregorianCalendar cal = new GregorianCalendar();
System.out.println((cal.get(GregorianCalendar.AM_PM) == GregorianCalendar.PM)? "下午" : "上午");
</code></p>

<p>当然，通过GregorianCalendar.get()还可以获取更多的信息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macvim配置]]></title>
    <link href="http://ipaler.com/blog/2013/08/01/macvim-config/"/>
    <updated>2013-08-01T17:04:00+08:00</updated>
    <id>http://ipaler.com/blog/2013/08/01/macvim-config</id>
    <content type="html"><![CDATA[<p>虽然我还没用，但是记下总是好的吧，这种东西网站一输如就能找到，就不放到笔记里了。</p>

<!-- more -->


<p><code>sh
"设置菜单语言
setlangmenu=zh_cn
" =========
" 功能函数
" =========
" 获取当前目录
func GetPWD()
returnsubstitute(getcwd(), "", "", "g")
endf
" =========
" 环境配置
" =========
" 保留历史记录
sethistory=400
" 命令行于状态行
setch=1
setstl=\ [File]\ %F%m%r%h%y[%{&amp;fileformat},%{&amp;fileencoding}]\ %w\ \ [PWD]\ %r%{GetPWD()}%h\ %=\ [Line]\ %l,%c\ %=\ %P
setls=2 " 始终显示状态行
" 制表符
settabstop=4
setexpandtab
setsmarttab
setshiftwidth=4
setsofttabstop=4
" 状态栏显示目前所执行的指令
setshowcmd
" 行控制
setlinebreak
setnocompatible
settextwidth=80
setwrap
" 行号和标尺
setnumber
setruler
setrulerformat=%15(%c%V\ %p%%%)
" 控制台响铃
:setnoerrorbells
:setnovisualbell
:sett_vb= "close visual bell
" 插入模式下使用 、
setbackspace=indent,eol,start
" 标签页
settabpagemax=20
setshowtabline=2
" 缩进
setautoindent
setcindent
setsmartindent
" 自动重新读入
setautoread
" 代码折叠
setfoldmethod=manual
"setfoldmethod=indent
" 自动切换到文件当前目录
setautochdir
"在查找时忽略大小写
setignorecase
setincsearch
sethlsearch
"显示匹配的括号
setshowmatch
"实现全能补全功能，需要打开文件类型检测
"filetype plugin indent on
"打开vim的文件类型自动检测功能
filetype on
"在所有模式下都允许使用鼠标，还可以是n,v,i,c等
setmouse=a
" 恢复上次文件打开位置
setviminfo='10,\"100,:20,%,n~/.viminfo
" =====================
" 多语言环境
"    默认为 UTF-8 编码
" =====================
ifhas("multi_byte")
setencoding=utf-8
" English messages only
"language messages zh_CN.utf-8
ifhas('win32')
language english
let&amp;termencoding=&amp;encoding
endif
setfencs=ucs-bom,utf-8,gbk,cp936,latin1
setformatoptions+=mM
setnobomb " 不使用 Unicode 签名
ifv:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
setambiwidth=double
endif
else
echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif
" =========
" 图形界面
" =========
ifhas('gui_running')
" 只显示菜单
setguioptions=mcr
" 高亮光标所在的行
setcursorline
" 编辑器配色
"colorscheme zenburn
"colorscheme dusk
ifhas("win32")
" Windows 兼容配置
source$VIMRUNTIME/mswin.vim
" f11 最大化
nmap :call libcallnr('fullscreen.dll', 'ToggleFullScreen', 0)
nmap ff :call libcallnr('fullscreen.dll', 'ToggleFullScreen', 0)
" 自动最大化窗口
au GUIEnter * simalt ~x
" 给 Win32 下的 gVim 窗口设置透明度
au GUIEnter * call libcallnr("vimtweak.dll", "SetAlpha", 250)
" 字体配置
exec'set guifont='.iconv('Courier_New', &amp;enc, 'gbk').':h11:cANSI'
exec'set guifontwide='.iconv('微软雅黑', &amp;enc, 'gbk').':h11'
endif
ifhas("unix") &amp;&amp; !has('gui_macvim')
setguifont=Courier\ 10\ Pitch\ 11
setguifontwide=YaHei\ Consolas\ Hybrid\ 11
endif
ifhas("gui_macvim")
" MacVim 下的字体配置
setguifont=Menlo:h12
setguifontwide=Hei:h12
" 半透明和窗口大小
settransparency=2
setlines=40 columns=110
" 使用MacVim原生的全屏幕功能
lets:lines=&amp;lines
lets:columns=&amp;columns
func! FullScreenEnter()
setlines=999 columns=999
setfu
endf
func! FullScreenLeave()
let&amp;lines=s:lines
let&amp;columns=s:columns
setnofu
endf
func! FullScreenToggle()
if&amp;fullscreen
call FullScreenLeave()
else
call FullScreenEnter()
endif
endf
" Mac 下，按 \\ 切换全屏
nmap   :call FullScreenToggle()
" Set input method off
setimdisable
" Set QuickTemplatePath
letguickTemplatePath = $HOME.'/.vim/templates/'
" 如果为空文件，则自动设置当前目录为桌面
lcd ~/Desktop/
" 自动切换到文件当前目录
setautochdir
" Set QuickTemplatePath
letguickTemplatePath = $HOME.'/.vim/templates/'
endif
endif
" =========
" 插件
" =========
filetype plugin indent on
" =========
" AutoCmd
" =========
ifhas("autocmd")
filetype plugin indent on
" 括号自动补全
func! AutoClose()
:inoremap ( ()i
:inoremap " ""i
:inoremap ' ''i
:inoremap { {}i
:inoremap [ []i
:inoremap } =ClosePair('}')
:inoremap ] =ClosePair(']')
:inoremap ) =ClosePair(')')
endf
func! ClosePair(char)
ifgetline('.')[col('.') - 1] == a:char
return"\"
else
returna:char
endif
endf
"auto close quotation marks forPHP, Javascript, etc, file
au FileType php,c,python,javascript exe AutoClose()
" Auto Check Syntax
"au BufWritePost,FileWritePost *.js,*.php call CheckSyntax(1)
" JavaScript 语法高亮
au FileType html,javascript letg:javascript_enable_domhtmlcss = 1
" 给 Javascript 文件添加 Dict
ifhas('gui_macvim') || has('unix')
au FileType javascript setlocal dict+=~/.vim/dict/javascript.dict
else
au FileType javascript setlocal dict+=$VIM/vimfiles/dict/javascript.dict
endif
" 格式化 JavaScript 文件
"au FileType javascript map :call g:Jsbeautify()
au FileType javascript setomnifunc=javascriptcomplete#CompleteJS
" 给 CSS 文件添加 Dict
ifhas('gui_macvim') || has('unix')
au FileType css setlocal dict+=~/.vim/dict/css.dict
else
au FileType css setlocal dict+=$VIM/vimfiles/dict/css.dict
endif
" 增加 ActionScript 语法支持
au BufNewFile,BufRead *.as setf actionscript
" CSS3 语法支持
au BufRead,BufNewFile *.css setft=css syntax=css3
" 增加 Objective-C 语法支持
au BufNewFile,BufRead,BufEnter,WinEnter,FileType *.m,*.h setf objc
" 将指定文件的换行符转换成 UNIX 格式
au FileType php,javascript,html,css,python,vim,vimwiki setff=unix
" 保存编辑状态
au BufWinLeave * ifexpand('%') != ''&amp;&amp; &amp;buftype == ''| mkview | endif
au BufRead     * ifexpand('%') != ''&amp;&amp; &amp;buftype == ''| silent loadview | syntax on | endif
" 自动最大化窗口
ifhas('gui_running')
ifhas("win32")
au GUIEnter * simalt ~x
"elseif has("unix")
"au GUIEnter * winpos 0 0
"setlines=999 columns=999
endif
endif
endif
"acp 自动补全插件
letg:AutoComplPop_Behavior = {
\ 'c': [ {'command': "\\",
\ 'pattern': ".",
\ 'repeat': 0}
\ ]
\}
" =========
" 快捷键
" =========
map cal:Calendar
letNERDTreeWinSize=22
map ntree :NERDTree
map nk :NERDTreeClose
map n :NERDTreeToggle
map cse :ColorSchemeExplorer
" 标签相关的快捷键 Ctrl
map tn :tabnext
map tp :tabprevious
map tc :tabclose
map :tabnew
map :tabprevious
map :tabnext
map :tabclose
map :tabnext
" 新建 XHTML 、PHP、Javascript 文件的快捷键
nmap :NewQuickTemplateTab xhtml
nmap :NewQuickTemplateTab php
nmap :NewQuickTemplateTab javascript
nmap :NewQuickTemplateTab css
" 在文件名上按gf时，在新的tab中打开
map gf :tabnew
"jquery 配色
au BufRead,BufNewFile *.js setsyntax=jquery
" jsLint forVim
letg:jslint_highlight_color  = '#996600'
" 指定 jsLint 调用路径，通常不用更改
letg:jslint_command = $HOME . '\/.vim\/jsl\/jsl'
" 指定 jsLint 的启动参数，可以指定相应的配置文件
letg:jslint_command_options = '-nofilelisting -nocontext -nosummary -nologo -process'
" 返回当前时间
func! GetTimeInfo()
"returnstrftime('%Y-%m-%d %A %H:%M:%S')
returnstrftime('%Y-%m-%d %H:%M:%S')
endfunction
" 插入模式按 Ctrl + D(ate) 插入当前时间
imap =GetTimeInfo()
" ==================
" plugin list
" ==================
"Color Scheme Explorer
"jsbeauty \ff
"NERDTree
"Calendar
"conquer_term
"nerd_commenter
"setup forC and C++
filetype plugin on
setnocp
</code></p>
]]></content>
  </entry>
  
</feed>
