<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 观察者 | ipaler]]></title>
  <link href="http://ipaler.com/blog/categories/观察者/atom.xml" rel="self"/>
  <link href="http://ipaler.com/"/>
  <updated>2014-10-30T18:39:13+08:00</updated>
  <id>http://ipaler.com/</id>
  <author>
    <name><![CDATA[HENRY_HUANGS]]></name>
    <email><![CDATA[huangyijie1989@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[设计模式学习笔记]观察者模式]]></title>
    <link href="http://ipaler.com/blog/2013/11/12/design-patterns-observer/"/>
    <updated>2013-11-12T22:41:00+08:00</updated>
    <id>http://ipaler.com/blog/2013/11/12/design-patterns-observer</id>
    <content type="html"><![CDATA[<h3>1. 模式定义</h3>

<p>观察者模式（Observer Pattern）也叫做发布订阅模式（Publish/subscribe），它使一个在项目中经常使用的模式。</p>

<h3>2. 模式各角色</h3>

<p><strong>Subject被观察者</strong>：定义被观察者必须实现的职责，它必须能够动态地增加、取消观察者。它一般是抽象类或者是实现类，仅仅完成作为被观察者必须实现的职责：管理观察者并通知观察者。</p>

<p><strong>Observer观察者</strong>：观察者接收到消息后，即进行update（更新方法）操作，对接收到的信息进行处理。</p>

<p><strong>ConcreteSubject具体的被观察者</strong>：定义被观察者自己的业务逻辑，同时定义对哪些事件进行通知。</p>

<p><strong>ConcreteObserver具体的观察者</strong>：每个观察在接收到消息后的处理反应是不同，各个观察者有自己的处理逻辑。</p>

<h3>3. 模式类图</h3>

<p><img src="http://githubimg.qiniudn.com/designpatterns/patterns_observer.png" alt="观察者模式类图" /></p>

<!-- more -->


<h3>4. 通用代码</h3>

<p><strong>被观察者</strong></p>

<p>```java
public abstract class Subject {</p>

<pre><code>// 定义一个观察者数组
public Vector&lt;Observer&gt; obsVector = new Vector&lt;Observer&gt;();

public void addObserver(Observer observer) {
    this.obsVector.add(observer);
}

// 删除一个观察者
public void delObserver(Observer observer) {
    this.obsVector.remove(observer);
}

// 通知所有观察者
public void notifyObservers() {
    for(Observer observer : this.obsVector)
        observer.update();

}
</code></pre>

<p>}</p>

<p>```</p>

<p><strong>具体被观察者</strong></p>

<p>```java
public class ConcreteSubject extends Subject {</p>

<pre><code>// 具体的业务
public void doSomething() {

    System.out.println("被观察者做点啥");

}
</code></pre>

<p>}
```</p>

<p><strong>观察者</strong></p>

<p>```java
public interface Observer {</p>

<pre><code>// 更新方法
public void update();
</code></pre>

<p>}
```</p>

<p><strong>具体观察者</strong></p>

<p>```java
public class ConcreteObserver implements Observer {</p>

<pre><code>// 实现更新方法
public void update() {
    System.out.println("接收到信息，并进行处理！");
}
</code></pre>

<p>}
```</p>

<p><strong>场景类</strong></p>

<p>```java
public class Client {</p>

<pre><code>public static void main(String[] args) {

    // 创建一个被观察者
    ConcreteSubject subject = new ConcreteSubject();

    // 定义一个观察者
    Observer observer = new ConcreteObserver();

    // 观察者观察被观察者
    subject.addObserver(observer);

    // 观察者开始活动
    subject.doSomething();

}
</code></pre>

<p>}
```</p>

<p>以上摘自秦小波老师的《设计模式之禅》</p>
]]></content>
  </entry>
  
</feed>
