<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: decorator | ipaler]]></title>
  <link href="http://ipaler.com/blog/categories/decorator/atom.xml" rel="self"/>
  <link href="http://ipaler.com/"/>
  <updated>2014-10-30T18:39:13+08:00</updated>
  <id>http://ipaler.com/</id>
  <author>
    <name><![CDATA[HENRY_HUANGS]]></name>
    <email><![CDATA[huangyijie1989@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[设计模式学习笔记]油漆工模式]]></title>
    <link href="http://ipaler.com/blog/2014/08/16/design-pattern-decorator/"/>
    <updated>2014-08-16T19:17:00+08:00</updated>
    <id>http://ipaler.com/blog/2014/08/16/design-pattern-decorator</id>
    <content type="html"><![CDATA[<h1>设计模式之Decorator(油漆工)</h1>

<p>文章转自 <a href="http://www.jdon.com">解道</a></p>

<p>查看 <a href="https://github.com/henryhuang/designpatterns/tree/master/src/ipaler/twoa/designpatterns/structure/decorator">代码</a></p>

<p>装饰模式:Decorator常被翻译成"装饰",我觉得翻译成"油漆工"更形象点,油漆工(decorator)是用来刷油漆的,那么被刷油漆的对象我们称decoratee.这两种实体在Decorator模式中是必须的.</p>

<h3>Decorator定义:</h3>

<p>动态给一个对象添加一些额外的职责,就象在墙上刷油漆.使用Decorator模式相比用生成子类方式达到功能的扩充显得更为灵活.</p>

<!-- more -->


<h3>为什么使用Decorator?</h3>

<p>我们通常可以使用继承来实现功能的拓展,如果这些需要拓展的功能的种类很繁多,那么势必生成很多子类,增加系统的复杂性,同时,使用继承实现功能拓展,我们必须可预见这些拓展功能,这些功能是编译时就确定了,是静态的.
使用Decorator的理由是:这些功能需要由用户动态决定加入的方式和时机.Decorator提供了"即插即用"的方法,在运行期间决定何时增加何种功能.</p>

<h3>如何使用?</h3>

<p>举Adapter中的打桩示例,在Adapter中有两种类:方形桩 圆形桩,Adapter模式展示如何综合使用这两个类,在Decorator模式中,我们是要在打桩时增加一些额外功能,比如,挖坑 在桩上钉木板等,不关心如何使用两个不相关的类.</p>

<p>我们先建立一个接口:</p>

<p>```
/<em>*
 *
 *
 * @author  HuangYijie
 * @date    2014年8月6日 下午1:42:20
 *
 </em>/
public interface Work {</p>

<pre><code>public void insert();
</code></pre>

<p>}</p>

<p>```</p>

<p>接口Work有一个具体实现:插入方形桩或圆形桩,这两个区别对Decorator是无所谓.我们以插入方形桩为例:</p>

<p>```
/<em>*
 *
 *
 * @author  HuangYijie
 * @date    2014年8月6日 下午1:42:34
 *
 </em>/
public class SquarePeg implements Work {</p>

<pre><code>@Override
public void insert() {
    System.out.println("方形桩插入");
}
</code></pre>

<p>}</p>

<p>```</p>

<p>现在有一个应用:需要在桩打入前,挖坑,在打入后,在桩上钉木板,这些额外的功能是动态,可能随意增加调整修改,比如,可能又需要在打桩之后钉架子(只是比喻).</p>

<p>那么我们使用Decorator模式,这里方形桩SquarePeg是decoratee(被刷油漆者),我们需要在decoratee上刷些"油漆",这些油漆就是那些额外的功能.</p>

<p>```
/<em>*
 *
 *
 * @author  HuangYijie
 * @date    2014年8月6日 下午1:42:47
 *
 </em>/
public class Decorator implements Work{</p>

<pre><code>private Work work;

// 额外增加的功能被打包在List中
private List&lt;String&gt; others = new ArrayList&lt;String&gt;();

// 在构造器中使用组合new方式，引入Work对象
public Decorator(Work work) {
    this.work = work;
    others.add("挖坑");
    others.add("钉木板");
}

@Override
public void insert() {
    newMethod();
}

//在新方法中，在insert之前增加其他方法，这里次序先后由用户灵活指定
public void newMethod() {
    otherMethod();
    work.insert();
}

public void otherMethod() {
    ListIterator&lt;String&gt; iterator = others.listIterator();
    while (iterator.hasNext()) {
        System.out.println(iterator.next());
    }
}
</code></pre>

<p>}
```</p>

<p>在上例中,我们把挖坑和钉木板都排在了打桩insert前面,这里只是举例说明额外功能次序可以任意安排.</p>

<p>好了,Decorator模式出来了,我们看如何调用:</p>

<p>```
/<em>*
 *
 *
 * @author  HuangYijie
 * @date    2014年8月6日 下午2:21:25
 *
 </em>/
public class Main {</p>

<pre><code>public static void main(String[] args) {

    Work squrePeg = new SquarePeg();
    Work decorator = new Decorator(squrePeg);
    decorator.insert();

}
</code></pre>

<p>}
```</p>

<p>Decorator模式至此完成.</p>

<p>如果你细心,会发现,上面调用类似我们读取文件时的调用:</p>

<p>FileReader fr = new FileReader(filename);
BufferedReader br = new BufferedReader(fr);</p>

<p>实际上Java 的I/O API就是使用Decorator实现的,I/O变种很多,如果都采取继承方法,将会产生很多子类,显然相当繁琐.</p>

<h3>Jive中的Decorator实现</h3>

<p>在论坛系统中,有些特别的字是不能出现在论坛中如"打倒XXX",我们需要过滤这些"反动"的字体.不让他们出现或者高亮度显示.</p>

<p>在IBM Java专栏中专门谈Jive的文章中,有谈及Jive中ForumMessageFilter.java使用了Decorator模式,其实,该程序并没有真正使用Decorator,而是提示说:针对特别论坛可以设计额外增加的过滤功能,那么就可以重组ForumMessageFilter作为Decorator模式了.</p>

<p>所以,我们在分辨是否真正是Decorator模式,以及会真正使用Decorator模式,一定要把握好Decorator模式的定义,以及其中参与的角色(Decoratee 和Decorator).</p>
]]></content>
  </entry>
  
</feed>
